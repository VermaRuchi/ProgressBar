{"version":3,"sources":["components/ProgressBar1.js","components/ProgressBar2.js","components/ProgressBar3/index.js","components/UserCard/UserCard.jsx","components/ProgressBar6/ProgressBar6.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar1","className","done","Progress","useState","style","setStyle","setTimeout","newStyle","opacity","width","transition","ProgressBar2","Track","styled","div","Thumb","props","percentage","ProgressBar3","clamp","min","value","max","Math","state","onClick","setState","this","Component","ProgressBar6","nextStep","bind","prevState","marginTop","color","marginBottom","React","ProgressBar","Filler","useStyles","makeStyles","theme","title","marginRight","cursor","link","textDecoration","App","classes","AppBar","position","Toolbar","Typography","variant","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3547348c.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport '../../src/App.css'\r\nfunction ProgressBar1() {\r\n    return (\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <p>\r\n                    <h1>React Progress Bar</h1>\r\n                </p>\r\n                <Progress done={70}/>\r\n                <Progress done={50}/>\r\n                <Progress done={30}/>\r\n                <Progress done={100}/>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar1\r\n\r\nconst Progress = ({done})=>{\r\n\r\n    const [style,setStyle] = useState({});\r\n  \r\n    setTimeout(()=>{\r\n      // here we can create a new style\r\n      const newStyle = {\r\n        opacity:1,\r\n        width:`${done}%`,\r\n        transition: 'width 0.3s ease-in-out'\r\n      }\r\n      setStyle(newStyle);\r\n    },1000);\r\n  \r\n    return (\r\n        <div className=\"progress\">\r\n          <div className=\"progress-done\" style={style}>\r\n            {/* wait a little bit and then apply the style. for the we r going to use hooks*/}\r\n               {done}%\r\n          </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction ProgressBar2() {\r\n    return (\r\n        <div>\r\n            Continue...\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar2\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport '../../App.css'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst Track = styled.div`\r\n    width:30%;\r\n    height:30px;\r\n    background-color:#fff;\r\n    border-radius: 20px;\r\n    box-shadow: inset 0 0 5px #000;\r\n    margin-top:10px;\r\n`;\r\n\r\nconst Thumb = styled.div`\r\n    width:${props=> props.percentage}%;\r\n    height:100%;\r\n    background-color:#6bccf9;\r\n    border-radius:22px;\r\n    transition: width 0.3s ease-in-out;\r\n`;\r\nexport default class ProgressBar3 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            percentage: 30\r\n        }\r\n    }\r\n\r\n    clamp = (min, value, max) => {\r\n        return Math.min(Math.max(min, value),max);\r\n        /*\r\n        so this is basically a function to clamp the value zero and\r\n        a hundred now if we use this like this \r\n        */\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <div>\r\n                        <button  onClick={() => { this.setState(\r\n                            {percentage: this.state.percentage + 10}\r\n                        )}}>Increase</button>\r\n                   \r\n                        <button onClick={() => { this.setState(\r\n                            {percentage: this.state.percentage - 10}\r\n                        )}}>Decrease</button>\r\n                </div>\r\n                <Track>\r\n                    <Thumb percentage={this.clamp(0,this.state.percentage,100)}/>\r\n                </Track>   \r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {ProgressBar} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport class UserCard extends Component {\r\n\r\n  state = {\r\n    uploadPercentage: 0,\r\n    avatar: ''\r\n  }\r\n\r\n  componentDidMount = () =>{\r\n    const {avatar} = this.props;\r\n    this.setState({ avatar })\r\n  }\r\n\r\n  uploadFile = ({ target: { files } }) =>{\r\n    console.log( files[0] )\r\n    let data = new FormData();\r\n    data.append( 'file', files[0] )\r\n\r\n    const options = {\r\n      onUploadProgress: (progressEvent) => {\r\n        const {loaded, total} = progressEvent;\r\n        let percent = Math.floor( (loaded * 100) / total )\r\n        console.log( `${loaded}kb of ${total}kb | ${percent}%` );\r\n\r\n        if( percent < 100 ){\r\n          this.setState({ uploadPercentage: percent })\r\n        }\r\n      }\r\n    }\r\n\r\n    axios.post(\"https://www.mocky.io/v2/5cc8019d300000980a055e76\", data, options).then(res => { \r\n        console.log(res)\r\n        this.setState({ avatar: res.data.url, uploadPercentage: 100 }, ()=>{\r\n          setTimeout(() => {\r\n            this.setState({ uploadPercentage: 0 })\r\n          }, 1000);\r\n        })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {uploadPercentage} = this.state;\r\n    return (\r\n      <div className=\"card card-user\">\r\n        <div className=\"image\">\r\n          <img src={this.props.bgImage} alt=\"...\" />\r\n        </div>\r\n        <div className=\"content\">\r\n          <div className=\"author\">\r\n            <a href=\"#pablo\">\r\n              <img\r\n                className=\"avatar border-gray\"\r\n                src={this.state.avatar}\r\n                alt=\"...\"\r\n              />\r\n              <input type=\"file\" className=\"form-control profile-pic-uploader\" onChange={this.uploadFile} />\r\n              { uploadPercentage > 0 && <ProgressBar now={uploadPercentage} active label={`${uploadPercentage}%`} /> }\r\n\r\n              <h4 className=\"title\">\r\n                {this.props.name}\r\n                <br />\r\n                <small>{this.props.userName}</small>\r\n              </h4>\r\n            </a>\r\n          </div>\r\n          <p className=\"description text-center\">{this.props.description}</p>\r\n        </div>\r\n        <hr />\r\n        <div className=\"text-center\">{this.props.socials}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserCard;","import React from 'react'\r\nimport './ProgressBar6.css'\r\nclass ProgressBar6 extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      \r\n      this.state = {\r\n        percentage: 0\r\n      }\r\n      \r\n      this.nextStep = this.nextStep.bind(this)\r\n    }\r\n    \r\n    nextStep() {\r\n      if(this.state.percentage === 100) return \r\n      this.setState(prevState => ({ percentage: prevState.percentage + 20 }))\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n          \r\n          <h2> A React Progress Bar </h2>\r\n          <ProgressBar percentage={this.state.percentage} />\r\n          \r\n          <div style={{ marginTop: '20px' }}>  \r\n            <button \r\n              onClick={this.nextStep}\r\n             >\r\n              Next Step\r\n            </button>  \r\n          </div>   \r\n          \r\n          <div style={{marginTop: '10px', color: 'blue', marginBottom: '15px'}} onClick={() => this.setState({ percentage: 0 })}>\r\n            Reset\r\n          </div>\r\n        </div>\r\n      )\r\n    }  \r\n  }\r\n  \r\n  const ProgressBar = (props) => {\r\n    return (\r\n        <div className=\"progress-bar\">\r\n          <Filler percentage={props.percentage} />\r\n        </div>\r\n      )\r\n  }\r\n  \r\n  const Filler = (props) => {\r\n    return <div className=\"filler\" style={{ width: `${props.percentage}%` }} />\r\n  }\r\n  \r\n  \r\nexport default ProgressBar6","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport ProgressBar1 from '../src/components/ProgressBar1'\nimport ProgressBar2 from '../src/components/ProgressBar2'\nimport ProgressBar3 from '../src/components/ProgressBar3'\nimport ProgressBar4 from '../src/components/UserCard/UserCard'\nimport ProgressBar5 from '../src/components/ProgressBar5'\nimport ProgressBar6 from './components/ProgressBar6/ProgressBar6'\n\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginRight:'15px',\n    cursor:'pointer',\n  },\n  link:{\n    color:'white',\n    textDecoration:'none'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <Router>\n              <AppBar position=\"static\" color=\"secondary\">\n                  <Toolbar>\n                      <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/\" className={classes.link}>Progress Bar1</Link>\n                      </Typography>\n                      <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/ProgressBar2\" className={classes.link}>Progress Bar2</Link>\n                      </Typography>\n                      <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/ProgressBar3\" className={classes.link}>Progress Bar3</Link>\n                      </Typography>\n                      {/* <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/ProgressBar4\" className={classes.link}>Progress Bar4</Link>\n                      </Typography> */}\n                       {/* <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/ProgressBar5\" className={classes.link}>Progress Bar5</Link>\n                      </Typography> */}\n                      <Typography variant=\"body1\" className={classes.title}>\n                      <Link to=\"/ProgressBar6\" className={classes.link}>Progress Bar6</Link>\n                      </Typography>\n\n                  </Toolbar>\n              </AppBar>\n              <Switch>\n                  <Route exact path=\"/\">\n                      <ProgressBar1 />\n                  </Route>\n                  <Route path=\"/ProgressBar2\">\n                      <ProgressBar2 />\n                  </Route>\n                  <Route path=\"/ProgressBar3\">\n                      <ProgressBar3 />\n                  </Route>\n                  {/* <Route path=\"/ProgressBar4\">\n                      <ProgressBar4 />\n                  </Route> */}\n                  {/* <Route path=\"/ProgressBar5\">\n                      <ProgressBar5 />\n                  </Route> */}\n                  <Route path=\"/ProgressBar6\">\n                    <ProgressBar6/>\n                  </Route>\n                </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}